#!/usr/bin/env python
# -*- coding:utf-8 -*-

# date created: 061112

###############################################################
# add the bed info to the binarized file generate by chromHMM #
# bed info: chr, start, end                                   #
###############################################################

#for I/O and commandline parsing
import os
import sys
import argparse
from argparse import RawTextHelpFormatter
import glob
import gc

dict_genome_size_hg19 = {
   'chr1': 249250621,
   'chr2': 243199373,
   'chr3': 198022430,
   'chr4': 191154276,
   'chr5': 180915260,
   'chr6': 171115067,
   'chr7': 159138663,
   'chr8': 146364022,
   'chr9': 141213431,
   'chr10': 135534747,
   'chr11': 135006516,
   'chr12': 133851895,
   'chr13': 115169878,
   'chr14': 107349540,
   'chr15': 102531392,
   'chr16': 90354753,
   'chr17': 81195210,
   'chr18': 78077248,
   'chr19': 59128983,
   'chr20': 63025520,
   'chr21': 48129895,
   'chr22': 51304566,
   'chrX': 155270560,
   'chrY': 59373566,
}


def bin2bed(bin_size, input_file, output_dir, dict_hg19 = dict_genome_size_hg19):
   """
   add the chrom, and coordinates of the bins to the binary file generated by chromHMM
   """

   # remove the garbage collector during list append
   gc.disable()
   bin_list=[]
   line_no = 0
   with open(input_file, 'r') as in_f:
      for f in in_f:
         line_no += 1
         if line_no == 1:
            #grep the chrom's name
            chrom = f.split('\t')[1].strip('\n')
            chrom_size = int(dict_hg19[chrom])

         #line 1 and 2 are the headers, the data start in line 3
         elif line_no == 3:
            for i in range(chrom_size/bin_size):
               bin_list.append("%s\t%s\t%s\t%s" %\
                     (chrom, 1+(line_no-3)*bin_size,
                        (1+(line_no-3))*bin_size, f))
               line_no += 1

   gc.enable()
   #finally output the file                                     
   if not os.path.exists(output_dir):
      os.makedirs(output_dir)

   head, tail = os.path.split(input_file)
   base = os.path.splitext(tail)[0]
   output_fname="%sbin-%s.bed" %(bin_size,base)
   output_file = str(os.path.join(output_dir, output_fname))

   with open(output_file, 'w') as output_f:
      for line in bin_list:
         output_f.write(line)

if __name__ == "__main__":
   parser =argparse.ArgumentParser(
      prog = 'BinChromHMM2Bed.py',
      description = """ Converting the binary files into bed format by adding the chr, start, end columns 
      !NOTE this program requires a big chunk of memory since the process dumps directly into memory""",
      formatter_class=RawTextHelpFormatter
   )
   parser.add_argument(
      '-b',
      '--bin-size',
      metavar = 'n',
      type = int,
      nargs = '?',
      default = 300,
      help = 'bin size in base pairs'
   )
   parser.add_argument(
      'input_file',
      metavar = 'f',
      type = str,
      nargs = '?',
      default = sys.stdin,
      help = 'file to process'
   )
   parser.add_argument(
      '-od',
      '--output_dir',
      metavar = 'od',
      type = str,
      nargs = '?',
      default = '.',
      help = 'directory for the output file'
   )

   args=parser.parse_args()

   # start doing its job...
   for binFile in glob.glob(args.input_file):
      bin2bed(args.bin_size, binFile,  args.output_dir)
